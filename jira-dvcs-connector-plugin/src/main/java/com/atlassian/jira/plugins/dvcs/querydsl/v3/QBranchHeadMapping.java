package com.atlassian.jira.plugins.dvcs.querydsl.v3;

import com.atlassian.pocketknife.api.querydsl.SchemaProvider;
import com.mysema.query.sql.ColumnMetadata;
import com.mysema.query.sql.RelationalPathBase;
import com.mysema.query.types.path.NumberPath;
import com.mysema.query.types.path.StringPath;

import java.sql.Types;

import static com.mysema.query.types.PathMetadataFactory.forVariable;

/**
 * Generated by https://bitbucket.org/atlassian/querydsl-ao-code-gen
 *
 * Changes made by hand:
 *    Map and FK mappings to integers
 *    Map Booleans to BooleanPaths
 *    Map Dates as DateTimePath&lt;Date&gt;
 *
 * Future approach is documented at https://extranet.atlassian.com/x/AAuQj
 */
public class QBranchHeadMapping extends RelationalPathBase<QBranchHeadMapping>
{

    private static final long serialVersionUID = -392943770L;

    public static final String AO_TABLE_NAME = "AO_E8B6CC_BRANCH_HEAD_MAPPING";

    public static final QBranchHeadMapping withSchema(SchemaProvider schemaProvider)
    {
        String schema = schemaProvider.getSchema(AO_TABLE_NAME);
        return new QBranchHeadMapping("BRANCH_HEAD_MAPPING", schema, AO_TABLE_NAME);
    }

    /**
     * Database Columns
     */
    public final StringPath BRANCH_NAME = createString("BRANCH_NAME");

    public final StringPath HEAD = createString("HEAD");

    public final NumberPath<Integer> ID = createNumber("ID", Integer.class);

    public final NumberPath<Integer> REPOSITORY_ID = createNumber("REPOSITORY_ID", Integer.class);

    public final com.mysema.query.sql.PrimaryKey<QBranchHeadMapping> BRANCHHEADMAPPING_PK = createPrimaryKey(ID);

    public QBranchHeadMapping(String variable, String schema, String table)
    {
        super(QBranchHeadMapping.class, forVariable(variable), schema, table);
        addMetadata();
    }

    private void addMetadata()
    {
        /**
         * Database Metadata is not yet used by QueryDSL but it might one day.
         */
        addMetadata(BRANCH_NAME, ColumnMetadata.named("BRANCH_NAME").ofType(Types.VARCHAR)); // .withSize(0)); // until detect primitive types, int ..
        addMetadata(HEAD, ColumnMetadata.named("HEAD").ofType(Types.VARCHAR)); // .withSize(0)); // until detect primitive types, int ..
        addMetadata(ID, ColumnMetadata.named("ID").ofType(Types.INTEGER)); // .withSize(0).withNotNull()); // until detect primitive types, int ..
        addMetadata(REPOSITORY_ID, ColumnMetadata.named("REPOSITORY_ID").ofType(Types.INTEGER));
    }
}