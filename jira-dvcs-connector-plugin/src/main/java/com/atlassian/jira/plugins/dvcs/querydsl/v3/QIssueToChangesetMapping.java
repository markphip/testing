package com.atlassian.jira.plugins.dvcs.querydsl.v3;

import com.atlassian.pocketknife.api.querydsl.SchemaProvider;
import com.mysema.query.sql.ColumnMetadata;
import com.mysema.query.sql.RelationalPathBase;
import com.mysema.query.types.expr.SimpleExpression;
import com.mysema.query.types.path.NumberPath;
import com.mysema.query.types.path.StringPath;

import java.sql.Types;

import static com.mysema.query.types.PathMetadataFactory.forVariable;

/**
 * Generated by https://bitbucket.org/atlassian/querydsl-ao-code-gen
 *
 * Changes made by hand:
 *    Map and FK mappings to integers
 *    Map Booleans to BooleanPaths
 *    Map Dates as DateTimePath&lt;Date&gt;
 *
 * Future approach is documented at https://extranet.atlassian.com/x/AAuQj
 */
public class QIssueToChangesetMapping extends RelationalPathBase<QIssueToChangesetMapping> implements IssueKeyedMapping
{

    private static final long serialVersionUID = 1225462570L;

    public static final String AO_TABLE_NAME = "AO_E8B6CC_ISSUE_TO_CHANGESET";

    public static final QIssueToChangesetMapping withSchema(SchemaProvider schemaProvider)
    {
        String schema = schemaProvider.getSchema(AO_TABLE_NAME);
        return new QIssueToChangesetMapping("ISSUE_TO_CHANGESET", schema, AO_TABLE_NAME);
    }

    /**
     * Database Columns
     */
    public final NumberPath<Integer> ID = createNumber("ID", Integer.class);

    public final NumberPath<Integer> CHANGESET_ID = createNumber("CHANGESET_ID", Integer.class);

    public final StringPath ISSUE_KEY = createString("ISSUE_KEY");

    public final StringPath PROJECT_KEY = createString("PROJECT_KEY");


    public final com.mysema.query.sql.PrimaryKey<QIssueToChangesetMapping> ISSUETOCHANGESET_PK = createPrimaryKey(ID);

    public QIssueToChangesetMapping(String variable, String schema, String table)
    {
        super(QIssueToChangesetMapping.class, forVariable(variable), schema, table);
        addMetadata();
    }

    private void addMetadata()
    {
        /**
         * Database Metadata is not yet used by QueryDSL but it might one day.
         */

        addMetadata(ID, ColumnMetadata.named("ID").ofType(Types.INTEGER)); // .withSize(0).withNotNull()); // until detect primitive types, int ..
        addMetadata(ISSUE_KEY, ColumnMetadata.named("ISSUE_KEY").ofType(Types.VARCHAR)); // .withSize(0)); // until detect primitive types, int ..
        addMetadata(PROJECT_KEY, ColumnMetadata.named("PROJECT_KEY").ofType(Types.VARCHAR)); // .withSize(0)); // until detect primitive types, int ..
        addMetadata(CHANGESET_ID, ColumnMetadata.named("CHANGESET_ID").ofType(Types.INTEGER));
    }

    @Override
    public SimpleExpression getIssueKeyExpression()
    {
        return ISSUE_KEY;
    }
}